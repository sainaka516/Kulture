// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  takes         Take[]    @relation("UserTakes")
  votes         Vote[]
  comments      Comment[]
  communities   CommunityMember[]
  ownedCommunities Community[] @relation("CommunityOwner")
  verified      Boolean   @default(false)
  viewedTakes   ViewedTake[]
  sentFriendRequests FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friends       Friendship[] @relation("UserFriends")
  friendsOf     Friendship[] @relation("FriendsOfUser")
  notifications        Notification[] @relation()
  notificationsSent    Notification[] @relation("NotificationFrom")
}

model Community {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  title       String
  description String?
  rules       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  owner       User      @relation("CommunityOwner", fields: [ownerId], references: [id])
  members     CommunityMember[]
  takes       Take[]
  parentId    String?
  parent      Community? @relation("SubCommunities", fields: [parentId], references: [id])
  children    Community[] @relation("SubCommunities")

  @@index([ownerId])
  @@index([parentId])
}

model CommunityMember {
  id          String    @id @default(cuid())
  role        String    @default("MEMBER") // OWNER, MODERATOR, MEMBER
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@index([userId])
  @@index([communityId])
}

model Take {
  id          String    @id @default(cuid())
  title       String
  content     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation("UserTakes", fields: [authorId], references: [id])
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  votes       Vote[]
  comments    Comment[]
  viewedBy    ViewedTake[]
  notifications Notification[]

  @@index([authorId])
  @@index([communityId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  takeId    String?
  take      Take?    @relation(fields: [takeId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([takeId])
}

model Vote {
  id        String   @id @default(cuid())
  type      String   // UP or DOWN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  takeId    String
  take      Take     @relation(fields: [takeId], references: [id], onDelete: Cascade)

  @@unique([userId, takeId])
  @@index([userId])
  @@index([takeId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ViewedTake {
  id        String   @id @default(cuid())
  userId    String
  takeId    String
  viewedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  take      Take     @relation(fields: [takeId], references: [id], onDelete: Cascade)

  @@unique([userId, takeId])
  @@index([userId])
  @@index([takeId])
}

model FriendRequest {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model Friendship {
  id          String   @id @default(cuid())
  userId      String
  friendId    String
  createdAt   DateTime @default(now())
  user        User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend      User     @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   // User who should receive the notification
  type      String   // FRIEND_REQUEST_ACCEPTED, TAKE_UPVOTED, TAKE_DOWNVOTED
  takeId    String?  // Optional: for vote notifications
  fromId    String?  // Optional: for friend request notifications
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  take      Take?    @relation(fields: [takeId], references: [id], onDelete: Cascade)
  from      User?    @relation("NotificationFrom", fields: [fromId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([takeId])
  @@index([fromId])
}
