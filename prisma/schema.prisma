generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                     String            @id @default(cuid())
  name                   String?
  email                  String?           @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  username               String?           @unique
  verified               Boolean           @default(false)
  password               String?
  accounts               Account[]
  comments               Comment[]
  ownedCommunities       Community[]       @relation("CommunityOwner")
  communities            CommunityMember[]
  receivedFriendRequests FriendRequest[]   @relation("ReceivedFriendRequests")
  sentFriendRequests     FriendRequest[]   @relation("SentFriendRequests")
  friendsOf              Friendship[]      @relation("FriendsOfUser")
  friends                Friendship[]      @relation("UserFriends")
  notificationsSent      Notification[]    @relation("NotificationFrom")
  notifications          Notification[]
  sessions               Session[]
  takes                  Take[]            @relation("UserTakes")
  viewedTakes            ViewedTake[]
  votes                  Vote[]
}

model Community {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  slug        String            @unique
  parentId    String?
  ownerId     String
  rules       String?
  title       String
  owner       User              @relation("CommunityOwner", fields: [ownerId], references: [id])
  parent      Community?        @relation("SubCommunities", fields: [parentId], references: [id])
  children    Community[]       @relation("SubCommunities")
  members     CommunityMember[]
  takes       Take[]

  @@index([ownerId])
  @@index([parentId])
}

model CommunityMember {
  id          String    @id @default(cuid())
  role        String    @default("MEMBER")
  createdAt   DateTime  @default(now())
  userId      String
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@index([userId])
  @@index([communityId])
}

model Take {
  id            String         @id @default(cuid())
  title         String
  content       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String
  communityId   String
  comments      Comment[]
  notifications Notification[]
  author        User           @relation("UserTakes", fields: [authorId], references: [id])
  community     Community      @relation(fields: [communityId], references: [id])
  viewedBy      ViewedTake[]
  votes         Vote[]

  @@index([authorId])
  @@index([communityId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  takeId    String?
  author    User     @relation(fields: [authorId], references: [id])
  take      Take?    @relation(fields: [takeId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([takeId])
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  type      String
  updatedAt DateTime @updatedAt
  takeId    String
  take      Take     @relation(fields: [takeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, takeId])
  @@index([userId])
  @@index([takeId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ViewedTake {
  id       String   @id @default(cuid())
  userId   String
  takeId   String
  viewedAt DateTime @default(now())
  take     Take     @relation(fields: [takeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, takeId])
  @@index([userId])
  @@index([takeId])
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  friend    User     @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  takeId    String?
  fromId    String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  from      User?    @relation("NotificationFrom", fields: [fromId], references: [id], onDelete: Cascade)
  take      Take?    @relation(fields: [takeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([takeId])
  @@index([fromId])
}
