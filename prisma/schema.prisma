// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  takes         Take[]    @relation("UserTakes")
  votes         Vote[]
  comments      Comment[]
  communities   CommunityMember[]
  ownedCommunities Community[] @relation("CommunityOwner")
}

model Community {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  title       String
  description String?
  rules       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  owner       User      @relation("CommunityOwner", fields: [ownerId], references: [id])
  members     CommunityMember[]
  takes       Take[]
  parentId    String?
  parent      Community? @relation("SubCommunities", fields: [parentId], references: [id])
  children    Community[] @relation("SubCommunities")

  @@index([ownerId])
  @@index([parentId])
}

model CommunityMember {
  id          String    @id @default(cuid())
  role        String    @default("MEMBER") // OWNER, MODERATOR, MEMBER
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@index([userId])
  @@index([communityId])
}

model Take {
  id          String    @id @default(cuid())
  title       String
  content     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation("UserTakes", fields: [authorId], references: [id])
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  votes       Vote[]
  comments    Comment[]

  @@index([authorId])
  @@index([communityId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  takeId    String?
  take      Take?    @relation(fields: [takeId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([takeId])
}

model Vote {
  id        String   @id @default(cuid())
  type      String   // UP or DOWN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  takeId    String
  take      Take     @relation(fields: [takeId], references: [id], onDelete: Cascade)

  @@unique([userId, takeId])
  @@index([userId])
  @@index([takeId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
